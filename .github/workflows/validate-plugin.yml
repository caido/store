name: Validate Plugin

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request number to validate'
        required: true
        type: string
      plugin_id:
        description: 'ID of the plugin to validate'
        required: true
        type: string

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get PR details
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ inputs.pr_number }}
            });
            return pr.data;

      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr.outputs.head.ref }}
          repository: ${{ steps.pr.outputs.head.repo.full_name }}

      - name: Get plugin entry
        id: plugin-info
        run: |
          PLUGIN_ID="${{ inputs.plugin_id }}"
          PLUGIN_ENTRY=$(jq -r --arg id "$PLUGIN_ID" '.[] | select(.id == $id)' plugin_packages.json)
          
          if [ -z "$PLUGIN_ENTRY" ]; then
            echo "Error: Plugin with ID '$PLUGIN_ID' not found in plugin_packages.json"
            exit 1
          fi
          
          echo "plugin_info<<EOF" >> $GITHUB_OUTPUT
          echo "$PLUGIN_ENTRY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get repository info
        id: repo-info
        run: |
          REPO=$(echo '${{ steps.plugin-info.outputs.plugin_info }}' | jq -r '.repository')
          OWNER=$(echo $REPO | cut -d'/' -f1)
          REPO_NAME=$(echo $REPO | cut -d'/' -f2)
          echo "owner=$OWNER" >> $GITHUB_OUTPUT
          echo "repo=$REPO_NAME" >> $GITHUB_OUTPUT

      - name: Get latest release
        id: release
        uses: actions/github-script@v7
        with:
          script: |
            const release = await github.rest.repos.getLatestRelease({
              owner: '${{ steps.repo-info.outputs.owner }}',
              repo: '${{ steps.repo-info.outputs.repo }}'
            });
            
            // Find the specific assets we need
            const pluginPackageAsset = release.data.assets.find(a => a.name === 'plugin_package.zip');
            const signatureAsset = release.data.assets.find(a => a.name === 'plugin_package.zip.sig');
            
            if (!pluginPackageAsset || !signatureAsset) {
              throw new Error('Required assets not found in release. Need plugin_package.zip and plugin_package.zip.sig');
            }
            
            return {
              tag_name: release.data.tag_name,
              plugin_package_url: pluginPackageAsset.browser_download_url,
              signature_url: signatureAsset.browser_download_url
            };

      - name: Download release artifacts
        run: |
          mkdir -p artifacts
          cd artifacts
          # Download plugin package
          curl -L -o plugin_package.zip "${{ steps.release.outputs.plugin_package_url }}"
          # Download signature
          curl -L -o plugin_package.zip.sig "${{ steps.release.outputs.signature_url }}"

      - name: Validate signature
        id: sig-validation
        run: |
          PUBLIC_KEY=$(echo '${{ steps.plugin-info.outputs.plugin_info }}' | jq -r '.public_key')
          if ./scripts/validate-signature.sh artifacts/plugin_package.zip artifacts/plugin_package.zip.sig "$PUBLIC_KEY"; then
            echo "signature_valid=true" >> $GITHUB_OUTPUT
          else
            echo "signature_valid=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate manifest
        id: manifest-validation
        run: |
          RELEASE_VERSION="${{ steps.release.outputs.tag_name }}"
          PLUGIN_ID=$(echo '${{ steps.plugin-info.outputs.plugin_info }}' | jq -r '.id')
          if ./scripts/validate-manifest.sh artifacts/plugin_package.zip "$RELEASE_VERSION" "$PLUGIN_ID"; then
            echo "manifest_valid=true" >> $GITHUB_OUTPUT
          else
            echo "manifest_valid=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for README in plugin repository
        id: readme-check
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const readme = await github.rest.repos.getContent({
                owner: '${{ steps.repo-info.outputs.owner }}',
                repo: '${{ steps.repo-info.outputs.repo }}',
                path: 'README.md',
                ref: '${{ steps.release.outputs.tag_name }}'
              });
              return { has_readme: true };
            } catch (error) {
              if (error.status === 404) {
                return { has_readme: false };
              }
              throw error;
            }

      - name: Check required artifacts
        id: artifacts-check
        run: |
          if [ -f "artifacts/plugin_package.zip" ] && [ -f "artifacts/plugin_package.zip.sig" ]; then
            echo "has_required_artifacts=true" >> $GITHUB_OUTPUT
          else
            echo "has_required_artifacts=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            // Extract plugin details
            const pluginInfo = JSON.parse('${{ steps.plugin-info.outputs.plugin_info }}');
            const pluginName = pluginInfo.name;
            const pluginRepo = pluginInfo.repository;
            const repoUrl = `https://github.com/${pluginRepo}`;
            const releaseVersion = '${{ steps.release.outputs.tag_name }}';
            
            const checks = [
              {
                name: 'Version Match',
                status: '${{ steps.manifest-validation.outputs.manifest_valid }}' === 'true',
                message: 'Manifest version matches release tag'
              },
              {
                name: 'ID Match',
                status: '${{ steps.manifest-validation.outputs.manifest_valid }}' === 'true',
                message: 'Plugin ID matches package entry'
              },
              {
                name: 'README Present',
                status: '${{ steps.readme-check.outputs.has_readme }}' === 'true',
                message: 'Repository contains README.md'
              },
              {
                name: 'Required Artifacts',
                status: '${{ steps.artifacts-check.outputs.has_required_artifacts }}' === 'true',
                message: 'Release contains plugin_package.zip and signature'
              },
              {
                name: 'Signature Validation',
                status: '${{ steps.sig-validation.outputs.signature_valid }}' === 'true',
                message: 'Plugin package signature is valid'
              }
            ];
            
            const checkList = checks.map(check => 
              `${check.status ? '✅' : '❌'} ${check.name}: ${check.message}`
            ).join('\n');
            
            const comment = `## Plugin Validation Results for ${pluginName} v${releaseVersion}

**Repository:** [${pluginRepo}](${repoUrl})

${checkList}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.pr_number }},
              body: comment
            });
